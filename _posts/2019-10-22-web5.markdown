---
layout: post
title: "WEB5: 19년 10월 22일 동아리 활동 보고서"
date: 2019-10-22 00:00:00
description: 19년 10월 22일 동아리 활동 보고서 # Add post description (optional)
img: # Add image post (optional)
fig-caption: # Add figcaption (optional)
tags: [report, web]
---

10월 22일, 404 컴퓨터 못 찾음은 17시부터 18시까지 1시간동안 2학기 위키위키 개발 프로젝트를 진행하게 되었습니다.  
데이터를 효과적으로 저장하기 위해 SQL문과 SQLite를 공부했습니다.

## 지난 시간에는...

```python
import flask

app = flask.Flask(__name__)

@app.route('/')
def root():
  return '<form action="/a" accept-charset="utf-8" method="post"><input type="text" name="n"></form>'

@app.route('/a', methods=['GET', 'POST']
def receive():
  return '안녕, {}!'.format(flask.requests.form['n'])
```

지난 시간엔 HTML의 form 요소를 사용하여 데이터를 전송하고, 그것을 Flask 모듈을 통해 받는 코드까지 구성했습니다.
그런데 그 데이터들을 어디에 저장해야 할까요?

### 옛날 옛적엔...

```python
def load(filename=''):
  return open(filename).read()

def save(filename='', data=''):
  with open(filename) as f:
    f.write(data)

data = load('data')
save(data)
```
이와 같이 파일에 그냥 저장했습니다.
이러한 방법에는 문제가 많았습니다.

대표적인 문제들:
1. 누구나 데이터에 접근할 수 있었다.
2. 많은 사람들이 한번에 데이터를 수정하는 경우, 데이터가 덮어쓰기되었다.

그래서 등장한 것이 있습니다: 데이터베이스(Database, DB)라고 부르는 소프트웨어입니다. 데이터베이스를 사용할 경우 데이터를 효과적으로 저장하고 제어할 수 있습니다.

## SQL: Structured Query Language
데이터베이스를 제어하는데 사용되는 언어를 SQL이라고 합니다. SQL은 MySQL, MSSQL, MariaDB, SQLite 등.. 종류에 따라 조금씩 다르지만 기본적인 기능은 대부분 같습니다. 보통 언어와 데이터베이스 소프트웨어 이름을 혼동해서 부르는데, 의미상 큰 차이는 없습니다.

가벼운 소프트웨어를 개발하는 경우, SQLite를 많이 사용하는데 다른 데이터베이스 소프트웨어와는 다르게 데이터베이스를 항상 파일로 저장해놓는 것이 특징입니다.

```python
import sqlite3

conn = sqlite3.connect('data.db') #여기서 부여되는 파일 확장자는 슬슬 큰 의미가 없어진다.
curs = conn.cursor()
```

Python에서는 이렇게 사용을 준비할 수 있습니다. 이것을 데이터베이스 연결이라고 부릅니다.

알아두자
* SQL은 기본적으로 문자열로써 작동한다. 이것은 해킹에 취약하다는 의미를 갖는다. (아래에서 알아보자.)
* SQL은 엔터를 인식하지 않는다. SQL이 알아보기 힘들어지면 적당히 엔터치자. 단, 코드의 한 줄이 끝난다는 걸 ;로 표기한다.
* 관습적으로 미리 정해진 코드는 대문자로, 표 이름과 같이 개발자가 임의로 정하는 것은 소문자로 작성한다.


### 필수적인 SQL 쿼리들

| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |

| 종류 | 사용 | 예시 |
| ------------- | ------------- |
| CREATE (생성) | CREATE TABLE 표이름(표 형식); | CREATE TABLE users(<br>id PRIMARY KEY AUTO INCREMENT, <br>password TEXT NOT NULL, <br>name TEXT NOT NULL); |
| INSERT (추가) | INSERT INTO 대상 VALUES(데이터); | INSERT INTO users VALUES(<br>password='password', name='박종현'); |
| SELECT (데이터 검색) | SELECT 데이터 FROM 표이름; | SELECT name FROM users;<br>SELECT * FROM users; |
| UPDATE (수정) | UPDATE 표이름 조건문; | UPDATE users password='p@ssw0rd’;<br>UPDATE users name='오충남' WHERE name='박종현'; |
| DELETE (삭제) | DELETE 표이름; | DELETE users;<br>DELETE users WHERE name='오충남’; |
| DROP (장비를 정지합니다) | DROP 표이름; | DROP users; |


#### 표 형식 부가설명

| id | password | name |

알아서 1씩 추가, 숫자
문자, 비우면 안됨
이름, 비우면 안됨

의 표를 만드는 SQL을 보자.
id PRIMARY KEY AUTO INCREMENT: 줄이름 종류 추가작업
password TEXT NOT NULL: 줄이름 종류 추가작업
의 형태로 구성된다.

종류는 NULL INTEGER REAL TEXT BLOB가 있다.
추가작업은 NOT NULL / PRIMARY KEY AUTO INCREMENT 가 주로 사용된다.

UPDATE와 DELETE 예시코드의 각 두 번째 줄을 보면 WHERE 이라는 조건이 사용되었다. 데이터를 특정시키기 위해 작동하는 것으로, 이 조건이 없으면 모든 데이터에 대해 작업이 이루어진다.
● 한 사람이 비밀번호 변경 작업을 수행했는데, 모든 사람의 비밀번호 데이터가 변경될 수 있는 것이다.

그래서 어떻게 사용할까요?
```python
import sqlite3

conn = sqlite3.connect('data.db') #여기서 부여되는 확장자는 슬슬 큰 의미가 없어진다.
curs = conn.cursor()

curs.execute('CREATE TABLE users(id PRIMARY KEY AUTO INCREMENT, password TEXT NOT NULL, name TEXT NOT NULL);')
conn.commit()

curs.execute('INSERT INTO users VALUES(password="password", name="박종현");')
conn.commit()

curs.execute('SELECT * FROM users;')
data = curs.fetchall()
```

### SQL 인젝션
SQL이 문자열로써 작동하는 것이 보안 면에서 취약하다고 언급했습니다. 왜 그럴까요?

다음과 같이 사용자의 아이디와 비밀번호를 확인하고 일치하면 로그인을 하는 프로그램이 있다고 가정합니다.
```python
username = flask.requests.form['username']
password = flask.requests.form['password']

curs.execute('SELECT * FROM users WHERE username="{}" AND password="{}");'.format(username, password))
```

위의 코드는 사용자로부터 아이디와 비밀번호를 입력받아서 내용과 일치하는 데이터를 선택하고 있습니다. 하지만 공격자가 만약 유저네임에 admin, 패스워드에 password" OR 1=1 -- 을 입력하면 SQL 쿼리문은 아래와 같이 됩니다.

SELECT * FROM users WHERE username="admin" and password="password" OR 1=1 --"
1=1은 항상 참이므로 이 방법으로 공격자는 비밀번호를 입력하지 않고 로그인할 수 있게 됩니다.

이것은 가장 기본적인 방법이고, 이러한 해킹 방법은 상당히 많습니다.
그래서 Python의 SQLite3 모듈은 인젝션을 방지하는 기능이 미리 추가되어있습니다.
```python
username = flask.requests.form['username']
password = flask.requests.form['password']

curs.execute('SELECT * FROM users WHERE username=? AND password=?);', [username, password])
```
SQL쿼리에서 사람들이 입력할 부분을 ?로 바꾸고, execute() 함수에 SQL쿼리와 데이터를 나눠서 넣습니다.
(예: curs.execute(SQL, [데이터들])